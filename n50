#! /usr/bin/env python2.7
from Bio import SeqIO
import argparse
import sys
import json

def check_positive_int(value):
    ivalue = int(value)
    if ivalue <= 0:
        raise argparse.ArgumentTypeError("%s is not a positive integer." % ivalue)
    return ivalue
    

ap = argparse.ArgumentParser()
ap.add_argument('infile')
ap.add_argument('-g', '--genomelength', type=int, default=0, help='Default is to take sum of contig/scaffold lengths as genome size, but this parameter let you set the actual genome size.')
ap.add_argument('-n', '--n50', action='store_true', help='Just output the N50 value')
ap.add_argument('-l', '--l50', action='store_true', help='Just output the L50 value')
ap.add_argument('-m', '--min', type=check_positive_int, help='Disregard contigs shorter than given integer')
args = ap.parse_args()

ih = open(args.infile, "rU")

sum=0
sizes=[]
for rec in SeqIO.parse(ih, 'fasta'):
    size = len(rec.seq)
    if size >= args.min:
        sum += size
        sizes.append(size)

ih.close()

if sum==0:
    if args.min:
        sys.stderr.write('No long sequences in input')       
    else:
        sys.stderr.write('No sequence in input')
    exit(1)

if args.genomelength == 0:
    genome_size = sum
else:
    genome_size = args.genomelength

sorted_sizes = sorted(sizes,reverse=True)
acc = 0
output = {'input_file': args.infile,
          'genome_size':genome_size,
          'n_contigs' : len(sorted_sizes),
          'total_contig_size' : sum,
          'E-size' : genome_size/len(sorted_sizes),
          'min_size' : sorted_sizes[-1],
          'max_size' : sorted_sizes[0]}

found_n50 = False
n = 0
for x in sorted_sizes:
    acc += x
    n += 1
    if acc > genome_size/2:
        output['N50'] = x
        output['L50'] = n
        found_n50 = True
        break
else:
    output['N50'] = 0
    output['L50'] = 0

if args.n50:
    print output['N50']
elif args.l50:
    print output['L50']
else:
    print json.dumps(output, indent=4, sort_keys=True)
