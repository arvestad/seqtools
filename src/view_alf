#! /usr/bin/env python
from Bio import AlignIO
from colorama import init as colorama_init, Fore, Back, Style
import argparse
import sys
 
def colorizer(c):
    if c in 'AILMFWVC':
        return Back.BLUE + c
    elif c in 'KR':
        return Back.RED + c
    elif c in 'ED':
        return Back.MAGENTA + c
    elif c in 'NQST':
        return Back.GREEN + c
    elif c in 'G':
        return Back.YELLOW + c
    elif c in 'P':
        return Back.YELLOW + c
    elif c in 'HY':
        return Back.CYAN + c
    else:
        return Back.WHITE + c

def colorize_sequence_string(s):
    colored_s = ''
    for c in s:
        colored_s += colorizer(c)
    return colored_s + Style.RESET_ALL

def get_accession_widths(alignment):
    max_accession_length = 5        # initial guess, or minimum
    for record in alignment:
        if len(record.id) > max_accession_length:
            max_accession_length = len(record.id)
    return max_accession_length

def print_one_sequence(rec, left_margin):
    colored_string = colorize_sequence_string(rec.seq)
    print("{0:{width}} {1}".format(rec.id, colored_string, width=left_margin))

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('infile')
#    ap.add_argument('-p', '--prefix', type=int, default=0, help='Number of characters to remove from the beggining of the accession. Note: PHYLIP format allows max 10 character accessions.')
    args = ap.parse_args()

    alignment = AlignIO.read(args.infile, "fasta")
    left_margin = get_accession_widths(alignment)

    colorama_init()
    for record in alignment:
        print_one_sequence(record, left_margin)

if __name__ == '__main__':
    main()
    
